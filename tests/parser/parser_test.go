//+build integration_tests

package parser

import (
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"testing"

	"github.com/SergeyShpak/gosif/tests/utils"
)

func TestParser(t *testing.T) {
	outDir := "foreign-main-gen-go"
	if err := os.RemoveAll(outDir); err != nil {
		t.Fatalf("failed to remove %s: %v", outDir, err)
	}
	if err := os.Mkdir(outDir, 0775); err != nil {
		t.Fatalf("failed to create a directory %s: %v", outDir, err)
	}
	defer os.RemoveAll(outDir)
	mainGenGoContent := `package main

	func main() {}
	
	func MyFunc(n int) int {
		return n
	}`
	fileToGen := "main.gen.go"
	mainGenGoPath := path.Join(outDir, fileToGen)
	if err := ioutil.WriteFile(mainGenGoPath, []byte(mainGenGoContent), 0644); err != nil {
		t.Fatalf("could not write the %s file: %v", mainGenGoPath, err)
	}
	actualErr := utils.Setup("out", outDir, false)
	expectedErr := fmt.Errorf("failed to remove a previously generated file: failed to remove the file foreign-main-gen-go/main.gen.go: it contains functions that were not generated by gosif")
	if err := utils.CheckTestErrors(expectedErr, actualErr); err != nil {
		t.Fatal(err)
	}
}

func TestEmptyDir(t *testing.T) {
	dir := "empty-dir.gen"
	if err := os.RemoveAll(dir); err != nil {
		t.Fatalf("failed to remove %s: %v", dir, err)
	}
	if err := os.Mkdir(dir, 0775); err != nil {
		t.Fatalf("failed to create a directory %s: %v", dir, err)
	}
	defer os.RemoveAll(dir)
	actualErr := utils.Setup("out", dir, false)
	expectedErr := fmt.Errorf("main package was not found in empty-dir.gen")
	if err := utils.CheckTestErrors(expectedErr, actualErr); err != nil {
		t.Fatal(err)
	}
}

func TestDirWithNoProcessabelFunctions(t *testing.T) {
	outDir := "no-processable-funcs"
	if err := os.RemoveAll(outDir); err != nil {
		t.Fatalf("failed to remove %s: %v", outDir, err)
	}
	if err := os.Mkdir(outDir, 0775); err != nil {
		t.Fatalf("failed to create a directory %s: %v", outDir, err)
	}
	defer os.RemoveAll(outDir)
	mainContent := `package main

	func main() {}
	
	func myFunc(n int) int {
		return n
	}`
	fileToGen := "main.go"
	mainPath := path.Join(outDir, fileToGen)
	if err := ioutil.WriteFile(mainPath, []byte(mainContent), 0644); err != nil {
		t.Fatalf("could not write the %s file: %v", mainPath, err)
	}
	if err := utils.Setup("out", outDir, false); err != nil {
		t.Fatal(err)
	}
	if _, err := os.Stat(mainPath); err != nil {
		if os.IsNotExist(err) {
			return
		}
		t.Fatalf("failed to lookup the file %s: %v", mainPath, err)
	}
}
